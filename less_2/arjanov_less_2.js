/*
 1. Объясните почему код даёт именно такие результаты?
Подсказка. Чтобы лучше разобраться возьмите этот код и запустите в отладчике в браузере со включенными точками остановки.
 */
//пример 1 
let a = 1, b = 1, c, d;
c = ++a;
alert(c);
// ответ: 2 
/* Объявлены переменные. Переменной а и b присвоена 1; c и d - undefined. На следующем шаге переменной с присваивается переменная а, увеличенная предварительно 
за счет префиксного инкремента на 1. 
в браузерную функцию alert(c) выводится 2*/


//пример 2 
d = b++;
alert(d);
//ответ: 1
/* Объявлены переменные. Переменной а и b присвоена 1; c и d - undefined. На следующем шаге переменной d присваивается переменная b(ее значение =1),
ПОСЛЕ чего за счет постфиксного инкремента происходит увеличение на 1. 
в браузерную функцию alert(d) выводится 1*/


//пример 3 
c = 2 + ++a;
alert(c);
//ответ: 5 
/* В переменной а записано значение 2(из предыдущего кода). В соответствии с требованием префиксного инкремента этому значению прибавляется 1 - получается 3.
Именно это значение суммируется с 2
в браузерную функцию alert(c) выводится 5*/


//пример 4 
d = 2 + b++;
alert(d);
//ответ: 4 
alert(a);
//3 
alert(b);
//3
/* Код имеет дает ответ с учетом предшествующего кода. Переменная b уже имеет значение 2 с постфиксным инкрементом, меняющим значение ПОСЛЕ исполнения кода, остается 2.
В соответствии с формулой, определяющей d получается 2+2 = 4*. alert(a) и  alert(b) сохраняют свои значения из предшествующего кода без изменений. */

/* 2. Чему будут равны переменные x и a в примере ниже? Написать почему так произошло (описать последовательность действий).*/
let a = 2;
let x = 1 + (a *= 2);
/* На первом этапе переменная а равна 2. При объявлении переменной х действия с а происходят в первую очередь (в связи с приоритетом). 2 * 2 = 4.
Следующая операция: 1+4 = 5
х = 5, а = 4*/

/*3. Объявить две переменные a и b и задать им целочисленные произвольные начальные значения.
Затем написать скрипт, который работает по следующему принципу:
- если a и b положительные, вывести их разность (ноль можно считать положительным числом);
- если а и b отрицательные, вывести их произведение;
- * (этот пункт по сложнее, делайте по желанию) если а и b разных знаков, вывести их сумму; */
let a = 1, b = 2;
if (a >= 0 && b >= 0) {
    console.log(a - b);
} else if (a < 0 && b < 0) {
    console.log(a * b);
} else if (a * b < 0) {
    console.log(a + b);
};

/*4. Реализовать основные 4 арифметические операции (+, -, /, *) в виде функций с двумя параметрами.
Т.е. например, функция для сложения должна принимать два числа, складывать их и возвращать результат.
Обязательно использовать оператор return. */

function addit(a, b) {
    return a + b;
}

function minus(a, b) {
    return a - b;
}

function division(a, b) {
    return a / b;
}

function multiply(a, b) {
    return a * b;
}

/*5. Реализовать функцию с тремя параметрами: function mathOperation(arg1, arg2, operation),
где arg1, arg2 – значения аргументов, operation – строка с названием операции. В зависимости от
переданного значения операции (использовать switch) выполнить одну из арифметических операций
(использовать функции из задания 4) и вернуть полученное значение. */

function operations(arg1, arg2, operation) {
    switch (operation) {
        case "+":
            return addit(arg1, arg2);
        case "-":
            return minus(arg1, arg2);
        case "/":
            return division(arg1, arg2);
        case "*":
            return multiply(arg1, arg2);
    }
}

console.log(operations(3, 5, "+"));
console.log(operations(3, 5, "-"));
console.log(operations(3, 5, "/"));
console.log(operations(3, 5, "*"));


